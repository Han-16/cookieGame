package cookieGame;

import java.util.ArrayList;
import java.util.List;

public class GameData {
	
	static List<Integer> teleportPosition = new ArrayList<>();
	
	public static void teleportPositionMaker() {
		for(int i=0; i<100; i++) {
			int a= (int)((Math.random())*(10));
			if(a>=8) {
				teleportPosition.add(1);
			} else if(a>=6) {
				teleportPosition.add(2);
			} else {
				teleportPosition.add(0);
			}
		}
//		System.out.println(teleportPosition);
	}

	
	
	static int ITEMLIST[][] = { 
			{0 ,0, 1, 0, 0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0, 0, 0}, 
			{1 ,0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{2 ,2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0},
			{3 ,2, 1, 2, 0, 0, 0, 0, 0, 0, 0 ,0 ,0, 1, 1, 0, 0},
			{4 ,0,100, 0, 0, 0, 0, 0, 55, 15, 15, 51,10, 55, 0, 0,10},
			{5 ,0,101, 0, 0, 0, 0, 0, 45, 15, 52, 25,15, 55, 0, 0,10},
			{6 ,0,102, 0, 0, 0, 0, 0, 35, 35, 35, 52,20, 55, 0, 0,10},
			{7 ,0,103,51, 0,10, 0, 0, 0,15, 5,30,10, 0, 0, 0,20},
			{8 ,0,201,60, 0,30, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0,20},
			{9 ,0,202,75, 0,65, 0, 0, 0, 3, 0, 5, 0, 0, 5, 0,10},
			{10,0,205,80, 0,50, 0, 0, 0, 5, 0, 3, 0, 0, 5, 0,15},
			{11,0,206,20, 0,60, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0,13},
			{12,0,301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{13,0,302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{14,0,401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{15,0,402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{16,0,403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{17,0,404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			///////////////////////////////////////////////////////
			{18,0,601, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{19,0,602, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{20,0,603, 1, 0, 02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{21,0,604, 02, 0, 03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{22,0,605, 01, 0, 04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{23,0,606, 01, 0, 01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{24,0,607, 03, 0, 01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{25,0,608, 03, 0, 02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{26,0,609, 012, 0, 03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{27,0,610, 02, 0, 012, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{28,0,611, 01, 0, 03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{29,0,612, 01, 0, 012, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{30,0,613, 03, 0, 03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{31,0,614, 013, 0, 013, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{32,0,615, 01, 0, 01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{33,0,701, 011, 0, 02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{34,0,702, 02, 0, 03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{35,0,703, 01, 0, 04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{36,0,704, 03, 0, 01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{37,0,705, 011, 0, 06, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{38,0,706, 02, 0, 05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{39,0,707, 011, 0, 03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{40,0,708, 21, 0, 02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{41,0,801, 10, 0, 10, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 13},
			{42,0,901, 0, 0, 0, 0, 0, 2, 1, 0, 0, 5, 0, 0, 0, 5},
			//////////////////////////////////
			};
	//	itemName; itemCategory; itemIndex; itemFullHp; itemHp; itemFullStamina; itemStamina; itemExp; 
	//itemSpd;itemStr; itemDmg;itemDex; itemCrt; itemDur; itemDef; itemWide; itemAccuracy;
	static int COMBINEITEMLIST[][] = { 
			{18,0,601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{19,0,602, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{20,0,603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{21,0,604, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{22,0,605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{23,0,606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{24,0,607, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{25,0,608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{26,0,609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{27,0,610, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{28,0,611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{29,0,612, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{30,0,613, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{31,0,614, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{32,0,615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{33,0,701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{34,0,702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{35,0,703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{36,0,704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{37,0,705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{38,0,706, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{39,0,707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{40,0,708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{41,0,801, 10, 0, 10, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 13},
			{42,0,901, 0, 0, 0, 0, 0, 2, 1, 0, 0, 5, 0, 0, 0, 5},
	};
	
	//조합
	
	static int MONSTERLIST[][] = { 
			{ 0, 0, 0, 0, 0, 0, 0, 0 }, 
			{ 1, 10, 10, 10, 10, 10, 10, 0 },
			{ 2, 20, 20, 20, 20, 20, 20, 0 }, 
			{ 3, 30, 30, 30, 30, 11, 30, 0 }, 
			{ 4, 30, 30, 30, 30, 30, 20, 0 },
			{ 5, 30, 23, 30, 30, 30, 30, 0  }, 
			{ 6, 30, 30, 30, 35, 30, 30, 0  }, 
			{ 7, 30, 30, 30, 30, 14, 30, 0  },
			{ 8, 30, 30, 30, 30, 30, 30, 0  }, 
			{ 9, 30, 30, 30, 30, 30, 30, 0  }, 
			{ 10, 30, 30, 30, 30, 30, 30, 0  },
			{ 11, 30, 32, 30, 23, 30, 30, 0  }, 
			{ 12, 30, 30, 30, 30, 30, 30, 0  }, 
			{ 13, 30, 30, 32, 30, 30, 30, 0  },
			{ 14, 30, 30, 30, 20, 30, 10, 0  }, 
			{ 15, 30, 30, 30, 30, 45, 30, 0  }, 
			{ 16, 30, 30, 30, 30, 30, 30, 0  },
			{ 17, 30, 30, 12, 30, 30, 32, 0  }, 
			{ 18, 30, 30, 30, 30, 30, 30 , 0 }, 
			{ 19, 30, 33, 30, 30, 30, 30, 0  },
			{ 20, 30, 30, 30, 30, 30, 30 , 0 },
			{ 21, 130, 30, 22, 30, 30, 30 , 0 },
			{ 22, 230, 30, 30, 30, 30, 30 , 0 },
			{ 23, 330, 30, 30, 30, 30, 30 , 0 },
			{ 24, 430, 30, 30, 30, 30, 30 , 0 },
			{ 25, 530, 30, 30, 30, 30, 30 , 0 },
			};
	// monsterIndex; monsterHp; monsterExp; monsterStr;monsterSpd; monsterDex;monsterAccuracy;

	public static int floorNum = 32;
	
	static List<List<List<Integer>>> allFloor = new ArrayList<>();
	
	public void RoomMaker() {
		//1개의 방정보리스트 만들기 후 전체리스트에 리스트추가 100번반복
		//전체 리스트 생성
		for(int i=0; i<floorNum; i++) {
			List<List<Integer>> Floor = new ArrayList<>();
			for(int j=0; j<4; j++) {
				List<Integer> Room = new ArrayList<>();
				if(i%10==0) {
					Room.add(0);
					if(j==0) {
						Room.set(0, 3);
					}
				} else {
					Room.add(roomOX());
				}
				Room.add(RandomMonster());
				Room.add(RandomMonster());
				Room.add(RandomMonster());
				Room.add(searchStamina());
				Floor.add(Room);
			}
			allFloor.add(Floor);
		}
		
		//나중에 지우기
//		System.out.println(allFloor);
	}
	
	public static int searchStamina() {
		int ranPoint =(int)((Math.random())*(3));
		return ranPoint;
	}
	
	static List<List<Integer>> RoomMon = new ArrayList<>();
	

			
	private int roomOX() {
		int ranMonster =(int)((Math.random())*(3));
		return ranMonster;
	}
	private int RandomMonster() {
		int c =(int)(Math.random()*10);
		int ranMonster;
		if(c>5) {
			ranMonster = (int)((Math.random())*(MONSTERLIST.length-5));
		} else {
			ranMonster = 0;
		}
		
		return ranMonster;
	}
	
	public static void setMonsterData() {
		
	}
	

}
